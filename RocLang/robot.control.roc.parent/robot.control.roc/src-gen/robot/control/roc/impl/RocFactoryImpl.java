/**
 * generated by Xtext 2.10.0
 */
package robot.control.roc.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import robot.control.roc.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RocFactoryImpl extends EFactoryImpl implements RocFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RocFactory init()
  {
    try
    {
      RocFactory theRocFactory = (RocFactory)EPackage.Registry.INSTANCE.getEFactory(RocPackage.eNS_URI);
      if (theRocFactory != null)
      {
        return theRocFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RocFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RocFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RocPackage.PROGRAM: return createProgram();
      case RocPackage.MOVEMENT: return createMovement();
      case RocPackage.MOTION: return createMotion();
      case RocPackage.ACTION: return createAction();
      case RocPackage.COMPLETE_ACTION: return createCompleteAction();
      case RocPackage.SINGLE_ACTION: return createSingleAction();
      case RocPackage.DIRECTED_ACTION: return createDirectedAction();
      case RocPackage.LEFT_RIGHT_DIRECTED_ACTION: return createLeftRightDirectedAction();
      case RocPackage.LEFT_RIGHT_DIRECTION: return createLeftRightDirection();
      case RocPackage.BACK_FORTH_DIRECTED_ACTION: return createBackForthDirectedAction();
      case RocPackage.BACK_FORTH_DIRECTION: return createBackForthDirection();
      case RocPackage.FULL_DIRECTED_ACTION: return createFullDirectedAction();
      case RocPackage.DIRECTION: return createDirection();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RocPackage.INTENSITY:
        return createIntensityFromString(eDataType, initialValue);
      case RocPackage.DURATION_UNIT:
        return createDurationUnitFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RocPackage.INTENSITY:
        return convertIntensityToString(eDataType, instanceValue);
      case RocPackage.DURATION_UNIT:
        return convertDurationUnitToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Movement createMovement()
  {
    MovementImpl movement = new MovementImpl();
    return movement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Motion createMotion()
  {
    MotionImpl motion = new MotionImpl();
    return motion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompleteAction createCompleteAction()
  {
    CompleteActionImpl completeAction = new CompleteActionImpl();
    return completeAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleAction createSingleAction()
  {
    SingleActionImpl singleAction = new SingleActionImpl();
    return singleAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DirectedAction createDirectedAction()
  {
    DirectedActionImpl directedAction = new DirectedActionImpl();
    return directedAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LeftRightDirectedAction createLeftRightDirectedAction()
  {
    LeftRightDirectedActionImpl leftRightDirectedAction = new LeftRightDirectedActionImpl();
    return leftRightDirectedAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LeftRightDirection createLeftRightDirection()
  {
    LeftRightDirectionImpl leftRightDirection = new LeftRightDirectionImpl();
    return leftRightDirection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BackForthDirectedAction createBackForthDirectedAction()
  {
    BackForthDirectedActionImpl backForthDirectedAction = new BackForthDirectedActionImpl();
    return backForthDirectedAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BackForthDirection createBackForthDirection()
  {
    BackForthDirectionImpl backForthDirection = new BackForthDirectionImpl();
    return backForthDirection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FullDirectedAction createFullDirectedAction()
  {
    FullDirectedActionImpl fullDirectedAction = new FullDirectedActionImpl();
    return fullDirectedAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Direction createDirection()
  {
    DirectionImpl direction = new DirectionImpl();
    return direction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Intensity createIntensityFromString(EDataType eDataType, String initialValue)
  {
    Intensity result = Intensity.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIntensityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DurationUnit createDurationUnitFromString(EDataType eDataType, String initialValue)
  {
    DurationUnit result = DurationUnit.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDurationUnitToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RocPackage getRocPackage()
  {
    return (RocPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RocPackage getPackage()
  {
    return RocPackage.eINSTANCE;
  }

} //RocFactoryImpl
