/*
 * generated by Xtext 2.10.0
 */
package robot.control.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RocGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.Program");
		private final Assignment cMovementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMovementsMovementParserRuleCall_0 = (RuleCall)cMovementsAssignment.eContents().get(0);
		
		//Program hidden(WS, ML_COMMENT, SL_COMMENT):
		//	movements+=Movement*;
		@Override public ParserRule getRule() { return rule; }
		
		//movements+=Movement*
		public Assignment getMovementsAssignment() { return cMovementsAssignment; }
		
		//Movement
		public RuleCall getMovementsMovementParserRuleCall_0() { return cMovementsMovementParserRuleCall_0; }
	}
	public class MovementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.Movement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMotionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMotionsMotionParserRuleCall_0_0 = (RuleCall)cMotionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cANDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cMotionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMotionsMotionParserRuleCall_1_1_0 = (RuleCall)cMotionsAssignment_1_1.eContents().get(0);
		private final RuleCall cPERIODTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Movement hidden(WS, ML_COMMENT, SL_COMMENT):
		//	motions+=Motion (AND motions+=Motion)* PERIOD;
		@Override public ParserRule getRule() { return rule; }
		
		//motions+=Motion (AND motions+=Motion)* PERIOD
		public Group getGroup() { return cGroup; }
		
		//motions+=Motion
		public Assignment getMotionsAssignment_0() { return cMotionsAssignment_0; }
		
		//Motion
		public RuleCall getMotionsMotionParserRuleCall_0_0() { return cMotionsMotionParserRuleCall_0_0; }
		
		//(AND motions+=Motion)*
		public Group getGroup_1() { return cGroup_1; }
		
		//AND
		public RuleCall getANDTerminalRuleCall_1_0() { return cANDTerminalRuleCall_1_0; }
		
		//motions+=Motion
		public Assignment getMotionsAssignment_1_1() { return cMotionsAssignment_1_1; }
		
		//Motion
		public RuleCall getMotionsMotionParserRuleCall_1_1_0() { return cMotionsMotionParserRuleCall_1_1_0; }
		
		//PERIOD
		public RuleCall getPERIODTerminalRuleCall_2() { return cPERIODTerminalRuleCall_2; }
	}
	public class MotionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.Motion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final RuleCall cFORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationDurationTerminalRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Assignment cDurationUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationUnitDurationUnitEnumRuleCall_3_0 = (RuleCall)cDurationUnitAssignment_3.eContents().get(0);
		
		//Motion:
		//	action=Action FOR duration=Duration durationUnit=DurationUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//action=Action FOR duration=Duration durationUnit=DurationUnit
		public Group getGroup() { return cGroup; }
		
		//action=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_0_0() { return cActionActionParserRuleCall_0_0; }
		
		//FOR
		public RuleCall getFORTerminalRuleCall_1() { return cFORTerminalRuleCall_1; }
		
		//duration=Duration
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//Duration
		public RuleCall getDurationDurationTerminalRuleCall_2_0() { return cDurationDurationTerminalRuleCall_2_0; }
		
		//durationUnit=DurationUnit
		public Assignment getDurationUnitAssignment_3() { return cDurationUnitAssignment_3; }
		
		//DurationUnit
		public RuleCall getDurationUnitDurationUnitEnumRuleCall_3_0() { return cDurationUnitDurationUnitEnumRuleCall_3_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cActionHolderAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cActionHolderCompleteActionParserRuleCall_0_0 = (RuleCall)cActionHolderAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIntensityAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIntensityIntensityEnumRuleCall_1_0_0 = (RuleCall)cIntensityAssignment_1_0.eContents().get(0);
		private final Assignment cActionHolderAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionHolderSingleActionParserRuleCall_1_1_0 = (RuleCall)cActionHolderAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIntensityAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIntensityIntensityEnumRuleCall_2_0_0 = (RuleCall)cIntensityAssignment_2_0.eContents().get(0);
		private final Assignment cActionHolderAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionHolderDirectedActionParserRuleCall_2_1_0 = (RuleCall)cActionHolderAssignment_2_1.eContents().get(0);
		
		//Action:
		//	actionHolder=CompleteAction
		//	| intensity=Intensity? actionHolder=SingleAction
		//	| intensity=Intensity? actionHolder=DirectedAction;
		@Override public ParserRule getRule() { return rule; }
		
		//actionHolder=CompleteAction | intensity=Intensity? actionHolder=SingleAction | intensity=Intensity?
		//actionHolder=DirectedAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//actionHolder=CompleteAction
		public Assignment getActionHolderAssignment_0() { return cActionHolderAssignment_0; }
		
		//CompleteAction
		public RuleCall getActionHolderCompleteActionParserRuleCall_0_0() { return cActionHolderCompleteActionParserRuleCall_0_0; }
		
		//intensity=Intensity? actionHolder=SingleAction
		public Group getGroup_1() { return cGroup_1; }
		
		//intensity=Intensity?
		public Assignment getIntensityAssignment_1_0() { return cIntensityAssignment_1_0; }
		
		//Intensity
		public RuleCall getIntensityIntensityEnumRuleCall_1_0_0() { return cIntensityIntensityEnumRuleCall_1_0_0; }
		
		//actionHolder=SingleAction
		public Assignment getActionHolderAssignment_1_1() { return cActionHolderAssignment_1_1; }
		
		//SingleAction
		public RuleCall getActionHolderSingleActionParserRuleCall_1_1_0() { return cActionHolderSingleActionParserRuleCall_1_1_0; }
		
		//intensity=Intensity? actionHolder=DirectedAction
		public Group getGroup_2() { return cGroup_2; }
		
		//intensity=Intensity?
		public Assignment getIntensityAssignment_2_0() { return cIntensityAssignment_2_0; }
		
		//Intensity
		public RuleCall getIntensityIntensityEnumRuleCall_2_0_0() { return cIntensityIntensityEnumRuleCall_2_0_0; }
		
		//actionHolder=DirectedAction
		public Assignment getActionHolderAssignment_2_1() { return cActionHolderAssignment_2_1; }
		
		//DirectedAction
		public RuleCall getActionHolderDirectedActionParserRuleCall_2_1_0() { return cActionHolderDirectedActionParserRuleCall_2_1_0; }
	}
	public class CompleteActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.CompleteAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cActionNameNeutralKeyword_0_0 = (Keyword)cActionNameAssignment_0.eContents().get(0);
		private final Keyword cFaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// Actions ------------------------------------------------------------------------
		//CompleteAction:
		//	actionName='neutral' 'face';
		@Override public ParserRule getRule() { return rule; }
		
		//actionName='neutral' 'face'
		public Group getGroup() { return cGroup; }
		
		//actionName='neutral'
		public Assignment getActionNameAssignment_0() { return cActionNameAssignment_0; }
		
		//'neutral'
		public Keyword getActionNameNeutralKeyword_0_0() { return cActionNameNeutralKeyword_0_0; }
		
		//'face'
		public Keyword getFaceKeyword_1() { return cFaceKeyword_1; }
	}
	public class SingleActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.SingleAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cActionNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cActionNameDropJawKeyword_0_0 = (Keyword)cActionNameAssignment_0.eContents().get(0);
		private final Assignment cActionNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cActionNameNodHeadKeyword_1_0 = (Keyword)cActionNameAssignment_1.eContents().get(0);
		
		//SingleAction:
		//	actionName='drop jaw'
		//	| actionName='nod Head';
		@Override public ParserRule getRule() { return rule; }
		
		//actionName='drop jaw' | actionName='nod Head'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//actionName='drop jaw'
		public Assignment getActionNameAssignment_0() { return cActionNameAssignment_0; }
		
		//'drop jaw'
		public Keyword getActionNameDropJawKeyword_0_0() { return cActionNameDropJawKeyword_0_0; }
		
		//actionName='nod Head'
		public Assignment getActionNameAssignment_1() { return cActionNameAssignment_1; }
		
		//'nod Head'
		public Keyword getActionNameNodHeadKeyword_1_0() { return cActionNameNodHeadKeyword_1_0; }
	}
	public class DirectedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.DirectedAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cActionNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cActionNameLeftRightDirectedActionParserRuleCall_0_0_0 = (RuleCall)cActionNameAssignment_0_0.eContents().get(0);
		private final Assignment cDirectionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirectionLeftRightDirectionParserRuleCall_0_1_0 = (RuleCall)cDirectionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cActionNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cActionNameBackForthDirectedActionParserRuleCall_1_0_0 = (RuleCall)cActionNameAssignment_1_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDirectionBackForthDirectionParserRuleCall_1_1_0 = (RuleCall)cDirectionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cActionNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cActionNameFullDirectedActionParserRuleCall_2_0_0 = (RuleCall)cActionNameAssignment_2_0.eContents().get(0);
		private final Assignment cDirectionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDirectionDirectionParserRuleCall_2_1_0 = (RuleCall)cDirectionAssignment_2_1.eContents().get(0);
		
		//DirectedAction:
		//	actionName=LeftRightDirectedAction direction=LeftRightDirection
		//	| actionName=BackForthDirectedAction direction=BackForthDirection
		//	| actionName=FullDirectedAction direction=Direction;
		@Override public ParserRule getRule() { return rule; }
		
		//actionName=LeftRightDirectedAction direction=LeftRightDirection | actionName=BackForthDirectedAction
		//direction=BackForthDirection | actionName=FullDirectedAction direction=Direction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//actionName=LeftRightDirectedAction direction=LeftRightDirection
		public Group getGroup_0() { return cGroup_0; }
		
		//actionName=LeftRightDirectedAction
		public Assignment getActionNameAssignment_0_0() { return cActionNameAssignment_0_0; }
		
		//LeftRightDirectedAction
		public RuleCall getActionNameLeftRightDirectedActionParserRuleCall_0_0_0() { return cActionNameLeftRightDirectedActionParserRuleCall_0_0_0; }
		
		//direction=LeftRightDirection
		public Assignment getDirectionAssignment_0_1() { return cDirectionAssignment_0_1; }
		
		//LeftRightDirection
		public RuleCall getDirectionLeftRightDirectionParserRuleCall_0_1_0() { return cDirectionLeftRightDirectionParserRuleCall_0_1_0; }
		
		//actionName=BackForthDirectedAction direction=BackForthDirection
		public Group getGroup_1() { return cGroup_1; }
		
		//actionName=BackForthDirectedAction
		public Assignment getActionNameAssignment_1_0() { return cActionNameAssignment_1_0; }
		
		//BackForthDirectedAction
		public RuleCall getActionNameBackForthDirectedActionParserRuleCall_1_0_0() { return cActionNameBackForthDirectedActionParserRuleCall_1_0_0; }
		
		//direction=BackForthDirection
		public Assignment getDirectionAssignment_1_1() { return cDirectionAssignment_1_1; }
		
		//BackForthDirection
		public RuleCall getDirectionBackForthDirectionParserRuleCall_1_1_0() { return cDirectionBackForthDirectionParserRuleCall_1_1_0; }
		
		//actionName=FullDirectedAction direction=Direction
		public Group getGroup_2() { return cGroup_2; }
		
		//actionName=FullDirectedAction
		public Assignment getActionNameAssignment_2_0() { return cActionNameAssignment_2_0; }
		
		//FullDirectedAction
		public RuleCall getActionNameFullDirectedActionParserRuleCall_2_0_0() { return cActionNameFullDirectedActionParserRuleCall_2_0_0; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_2_1() { return cDirectionAssignment_2_1; }
		
		//Direction
		public RuleCall getDirectionDirectionParserRuleCall_2_1_0() { return cDirectionDirectionParserRuleCall_2_1_0; }
	}
	public class LeftRightDirectedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.LeftRightDirectedAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTiltHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTiltHeadTiltKeyword_0_0 = (Keyword)cTiltHeadAssignment_0.eContents().get(0);
		private final Keyword cHeadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LeftRightDirectedAction:
		//	tiltHead='tilt' 'head';
		@Override public ParserRule getRule() { return rule; }
		
		//tiltHead='tilt' 'head'
		public Group getGroup() { return cGroup; }
		
		//tiltHead='tilt'
		public Assignment getTiltHeadAssignment_0() { return cTiltHeadAssignment_0; }
		
		//'tilt'
		public Keyword getTiltHeadTiltKeyword_0_0() { return cTiltHeadTiltKeyword_0_0; }
		
		//'head'
		public Keyword getHeadKeyword_1() { return cHeadKeyword_1; }
	}
	public class LeftRightDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.LeftRightDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cRightRightKeyword_1_0 = (Keyword)cRightAssignment_1.eContents().get(0);
		
		//LeftRightDirection:
		//	left='left'
		//	| right='right';
		@Override public ParserRule getRule() { return rule; }
		
		//left='left' | right='right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left='left'
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//'left'
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }
		
		//right='right'
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//'right'
		public Keyword getRightRightKeyword_1_0() { return cRightRightKeyword_1_0; }
	}
	public class BackForthDirectedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.BackForthDirectedAction");
		private final Assignment cHeadAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cHeadHeadKeyword_0 = (Keyword)cHeadAssignment.eContents().get(0);
		
		//BackForthDirectedAction:
		//	head='head';
		@Override public ParserRule getRule() { return rule; }
		
		//head='head'
		public Assignment getHeadAssignment() { return cHeadAssignment; }
		
		//'head'
		public Keyword getHeadHeadKeyword_0() { return cHeadHeadKeyword_0; }
	}
	public class BackForthDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.BackForthDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBackAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBackBackKeyword_0_0 = (Keyword)cBackAssignment_0.eContents().get(0);
		private final Assignment cForthAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cForthForthKeyword_1_0 = (Keyword)cForthAssignment_1.eContents().get(0);
		
		//BackForthDirection:
		//	back='back'
		//	| forth='forth';
		@Override public ParserRule getRule() { return rule; }
		
		//back='back' | forth='forth'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//back='back'
		public Assignment getBackAssignment_0() { return cBackAssignment_0; }
		
		//'back'
		public Keyword getBackBackKeyword_0_0() { return cBackBackKeyword_0_0; }
		
		//forth='forth'
		public Assignment getForthAssignment_1() { return cForthAssignment_1; }
		
		//'forth'
		public Keyword getForthForthKeyword_1_0() { return cForthForthKeyword_1_0; }
	}
	public class FullDirectedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.FullDirectedAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTurnHeadAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTurnHeadTurnKeyword_0_0_0 = (Keyword)cTurnHeadAssignment_0_0.eContents().get(0);
		private final Keyword cHeadKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTurnEyesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTurnEyesTurnKeyword_1_0_0 = (Keyword)cTurnEyesAssignment_1_0.eContents().get(0);
		private final Keyword cEyesKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//FullDirectedAction:
		//	turnHead='turn' 'head'
		//	| turnEyes='turn' 'eyes';
		@Override public ParserRule getRule() { return rule; }
		
		//turnHead='turn' 'head' | turnEyes='turn' 'eyes'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//turnHead='turn' 'head'
		public Group getGroup_0() { return cGroup_0; }
		
		//turnHead='turn'
		public Assignment getTurnHeadAssignment_0_0() { return cTurnHeadAssignment_0_0; }
		
		//'turn'
		public Keyword getTurnHeadTurnKeyword_0_0_0() { return cTurnHeadTurnKeyword_0_0_0; }
		
		//'head'
		public Keyword getHeadKeyword_0_1() { return cHeadKeyword_0_1; }
		
		//turnEyes='turn' 'eyes'
		public Group getGroup_1() { return cGroup_1; }
		
		//turnEyes='turn'
		public Assignment getTurnEyesAssignment_1_0() { return cTurnEyesAssignment_1_0; }
		
		//'turn'
		public Keyword getTurnEyesTurnKeyword_1_0_0() { return cTurnEyesTurnKeyword_1_0_0; }
		
		//'eyes'
		public Keyword getEyesKeyword_1_1() { return cEyesKeyword_1_1; }
	}
	public class DirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUPAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cUPUpKeyword_0_0 = (Keyword)cUPAssignment_0.eContents().get(0);
		private final Assignment cDOWNAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDOWNDownKeyword_1_0 = (Keyword)cDOWNAssignment_1.eContents().get(0);
		private final Assignment cLEFTAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cLEFTLeftKeyword_2_0 = (Keyword)cLEFTAssignment_2.eContents().get(0);
		private final Assignment cRIGHTAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cRIGHTRightKeyword_3_0 = (Keyword)cRIGHTAssignment_3.eContents().get(0);
		
		//Direction:
		//	UP='up'
		//	| DOWN='down'
		//	| LEFT='left'
		//	| RIGHT='right';
		@Override public ParserRule getRule() { return rule; }
		
		//UP='up' | DOWN='down' | LEFT='left' | RIGHT='right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UP='up'
		public Assignment getUPAssignment_0() { return cUPAssignment_0; }
		
		//'up'
		public Keyword getUPUpKeyword_0_0() { return cUPUpKeyword_0_0; }
		
		//DOWN='down'
		public Assignment getDOWNAssignment_1() { return cDOWNAssignment_1; }
		
		//'down'
		public Keyword getDOWNDownKeyword_1_0() { return cDOWNDownKeyword_1_0; }
		
		//LEFT='left'
		public Assignment getLEFTAssignment_2() { return cLEFTAssignment_2; }
		
		//'left'
		public Keyword getLEFTLeftKeyword_2_0() { return cLEFTLeftKeyword_2_0; }
		
		//RIGHT='right'
		public Assignment getRIGHTAssignment_3() { return cRIGHTAssignment_3; }
		
		//'right'
		public Keyword getRIGHTRightKeyword_3_0() { return cRIGHTRightKeyword_3_0; }
	}
	
	public class IntensityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.Intensity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCPronouncedKeyword_0_0 = (Keyword)cCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cATraceOfKeyword_1_0 = (Keyword)cAEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBSlightlyKeyword_2_0 = (Keyword)cBEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDSevereKeyword_3_0 = (Keyword)cDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEMaximumKeyword_4_0 = (Keyword)cEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Intensity:
		//	C='pronounced'
		//	| A='trace of'
		//	| B='slightly'
		//	| D='severe'
		//	| E='maximum';
		public EnumRule getRule() { return rule; }
		
		//C='pronounced' | A='trace of' | B='slightly' | D='severe' | E='maximum'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//C='pronounced'
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_0() { return cCEnumLiteralDeclaration_0; }
		
		//'pronounced'
		public Keyword getCPronouncedKeyword_0_0() { return cCPronouncedKeyword_0_0; }
		
		//A='trace of'
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_1() { return cAEnumLiteralDeclaration_1; }
		
		//'trace of'
		public Keyword getATraceOfKeyword_1_0() { return cATraceOfKeyword_1_0; }
		
		//B='slightly'
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_2() { return cBEnumLiteralDeclaration_2; }
		
		//'slightly'
		public Keyword getBSlightlyKeyword_2_0() { return cBSlightlyKeyword_2_0; }
		
		//D='severe'
		public EnumLiteralDeclaration getDEnumLiteralDeclaration_3() { return cDEnumLiteralDeclaration_3; }
		
		//'severe'
		public Keyword getDSevereKeyword_3_0() { return cDSevereKeyword_3_0; }
		
		//E='maximum'
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_4() { return cEEnumLiteralDeclaration_4; }
		
		//'maximum'
		public Keyword getEMaximumKeyword_4_0() { return cEMaximumKeyword_4_0; }
	}
	public class DurationUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.DurationUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMILLISECONDSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMILLISECONDSMillisecondsKeyword_0_0 = (Keyword)cMILLISECONDSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSECONDSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSECONDSSecondsKeyword_1_0 = (Keyword)cSECONDSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUTESMinutesKeyword_2_0 = (Keyword)cMINUTESEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DurationUnit:
		//	MILLISECONDS='milliseconds'
		//	| SECONDS='seconds'
		//	| MINUTES='minutes';
		public EnumRule getRule() { return rule; }
		
		//MILLISECONDS='milliseconds' | SECONDS='seconds' | MINUTES='minutes'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MILLISECONDS='milliseconds'
		public EnumLiteralDeclaration getMILLISECONDSEnumLiteralDeclaration_0() { return cMILLISECONDSEnumLiteralDeclaration_0; }
		
		//'milliseconds'
		public Keyword getMILLISECONDSMillisecondsKeyword_0_0() { return cMILLISECONDSMillisecondsKeyword_0_0; }
		
		//SECONDS='seconds'
		public EnumLiteralDeclaration getSECONDSEnumLiteralDeclaration_1() { return cSECONDSEnumLiteralDeclaration_1; }
		
		//'seconds'
		public Keyword getSECONDSSecondsKeyword_1_0() { return cSECONDSSecondsKeyword_1_0; }
		
		//MINUTES='minutes'
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_2() { return cMINUTESEnumLiteralDeclaration_2; }
		
		//'minutes'
		public Keyword getMINUTESMinutesKeyword_2_0() { return cMINUTESMinutesKeyword_2_0; }
	}
	
	private final ProgramElements pProgram;
	private final MovementElements pMovement;
	private final MotionElements pMotion;
	private final ActionElements pAction;
	private final IntensityElements eIntensity;
	private final CompleteActionElements pCompleteAction;
	private final SingleActionElements pSingleAction;
	private final DirectedActionElements pDirectedAction;
	private final LeftRightDirectedActionElements pLeftRightDirectedAction;
	private final LeftRightDirectionElements pLeftRightDirection;
	private final BackForthDirectedActionElements pBackForthDirectedAction;
	private final BackForthDirectionElements pBackForthDirection;
	private final FullDirectedActionElements pFullDirectedAction;
	private final DirectionElements pDirection;
	private final TerminalRule tDuration;
	private final DurationUnitElements eDurationUnit;
	private final TerminalRule tFOR;
	private final TerminalRule tAND;
	private final TerminalRule tPERIOD;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RocGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pMovement = new MovementElements();
		this.pMotion = new MotionElements();
		this.pAction = new ActionElements();
		this.eIntensity = new IntensityElements();
		this.pCompleteAction = new CompleteActionElements();
		this.pSingleAction = new SingleActionElements();
		this.pDirectedAction = new DirectedActionElements();
		this.pLeftRightDirectedAction = new LeftRightDirectedActionElements();
		this.pLeftRightDirection = new LeftRightDirectionElements();
		this.pBackForthDirectedAction = new BackForthDirectedActionElements();
		this.pBackForthDirection = new BackForthDirectionElements();
		this.pFullDirectedAction = new FullDirectedActionElements();
		this.pDirection = new DirectionElements();
		this.tDuration = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.Duration");
		this.eDurationUnit = new DurationUnitElements();
		this.tFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.FOR");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.AND");
		this.tPERIOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "robot.control.Roc.PERIOD");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("robot.control.Roc".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program hidden(WS, ML_COMMENT, SL_COMMENT):
	//	movements+=Movement*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Movement hidden(WS, ML_COMMENT, SL_COMMENT):
	//	motions+=Motion (AND motions+=Motion)* PERIOD;
	public MovementElements getMovementAccess() {
		return pMovement;
	}
	
	public ParserRule getMovementRule() {
		return getMovementAccess().getRule();
	}
	
	//Motion:
	//	action=Action FOR duration=Duration durationUnit=DurationUnit;
	public MotionElements getMotionAccess() {
		return pMotion;
	}
	
	public ParserRule getMotionRule() {
		return getMotionAccess().getRule();
	}
	
	//Action:
	//	actionHolder=CompleteAction
	//	| intensity=Intensity? actionHolder=SingleAction
	//	| intensity=Intensity? actionHolder=DirectedAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//enum Intensity:
	//	C='pronounced'
	//	| A='trace of'
	//	| B='slightly'
	//	| D='severe'
	//	| E='maximum';
	public IntensityElements getIntensityAccess() {
		return eIntensity;
	}
	
	public EnumRule getIntensityRule() {
		return getIntensityAccess().getRule();
	}
	
	//// Actions ------------------------------------------------------------------------
	//CompleteAction:
	//	actionName='neutral' 'face';
	public CompleteActionElements getCompleteActionAccess() {
		return pCompleteAction;
	}
	
	public ParserRule getCompleteActionRule() {
		return getCompleteActionAccess().getRule();
	}
	
	//SingleAction:
	//	actionName='drop jaw'
	//	| actionName='nod Head';
	public SingleActionElements getSingleActionAccess() {
		return pSingleAction;
	}
	
	public ParserRule getSingleActionRule() {
		return getSingleActionAccess().getRule();
	}
	
	//DirectedAction:
	//	actionName=LeftRightDirectedAction direction=LeftRightDirection
	//	| actionName=BackForthDirectedAction direction=BackForthDirection
	//	| actionName=FullDirectedAction direction=Direction;
	public DirectedActionElements getDirectedActionAccess() {
		return pDirectedAction;
	}
	
	public ParserRule getDirectedActionRule() {
		return getDirectedActionAccess().getRule();
	}
	
	//LeftRightDirectedAction:
	//	tiltHead='tilt' 'head';
	public LeftRightDirectedActionElements getLeftRightDirectedActionAccess() {
		return pLeftRightDirectedAction;
	}
	
	public ParserRule getLeftRightDirectedActionRule() {
		return getLeftRightDirectedActionAccess().getRule();
	}
	
	//LeftRightDirection:
	//	left='left'
	//	| right='right';
	public LeftRightDirectionElements getLeftRightDirectionAccess() {
		return pLeftRightDirection;
	}
	
	public ParserRule getLeftRightDirectionRule() {
		return getLeftRightDirectionAccess().getRule();
	}
	
	//BackForthDirectedAction:
	//	head='head';
	public BackForthDirectedActionElements getBackForthDirectedActionAccess() {
		return pBackForthDirectedAction;
	}
	
	public ParserRule getBackForthDirectedActionRule() {
		return getBackForthDirectedActionAccess().getRule();
	}
	
	//BackForthDirection:
	//	back='back'
	//	| forth='forth';
	public BackForthDirectionElements getBackForthDirectionAccess() {
		return pBackForthDirection;
	}
	
	public ParserRule getBackForthDirectionRule() {
		return getBackForthDirectionAccess().getRule();
	}
	
	//FullDirectedAction:
	//	turnHead='turn' 'head'
	//	| turnEyes='turn' 'eyes';
	public FullDirectedActionElements getFullDirectedActionAccess() {
		return pFullDirectedAction;
	}
	
	public ParserRule getFullDirectedActionRule() {
		return getFullDirectedActionAccess().getRule();
	}
	
	//Direction:
	//	UP='up'
	//	| DOWN='down'
	//	| LEFT='left'
	//	| RIGHT='right';
	public DirectionElements getDirectionAccess() {
		return pDirection;
	}
	
	public ParserRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//terminal Duration:
	//	INT;
	public TerminalRule getDurationRule() {
		return tDuration;
	}
	
	//enum DurationUnit:
	//	MILLISECONDS='milliseconds'
	//	| SECONDS='seconds'
	//	| MINUTES='minutes';
	public DurationUnitElements getDurationUnitAccess() {
		return eDurationUnit;
	}
	
	public EnumRule getDurationUnitRule() {
		return getDurationUnitAccess().getRule();
	}
	
	//terminal FOR:
	//	'for';
	public TerminalRule getFORRule() {
		return tFOR;
	}
	
	//terminal AND:
	//	'and';
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal PERIOD:
	//	'.';
	public TerminalRule getPERIODRule() {
		return tPERIOD;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
