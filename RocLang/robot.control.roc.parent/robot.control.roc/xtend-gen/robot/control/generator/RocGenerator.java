/**
 * generated by Xtext 2.10.0
 */
package robot.control.generator;

import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import robot.control.conversion.MovementConverter;
import robot.control.roc.Movement;
import robot.control.roc.Program;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RocGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    URI _uRI = resource.getURI();
    String _lastSegment = _uRI.lastSegment();
    String _replace = _lastSegment.replace(".roc", ".json");
    StringConcatenation _builder = new StringConcatenation();
    {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterator<Program> _filter = Iterators.<Program>filter(_allContents, Program.class);
      Iterable<Program> _iterable = IteratorExtensions.<Program>toIterable(_filter);
      for(final Program program : _iterable) {
        EList<Movement> _movements = program.getMovements();
        MovementConverter.convertMovements(_movements);
        _builder.newLineIfNotEmpty();
      }
    }
    fsa.generateFile(_replace, _builder);
  }
}
