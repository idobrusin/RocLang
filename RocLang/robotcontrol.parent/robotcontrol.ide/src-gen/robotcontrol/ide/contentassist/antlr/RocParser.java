/*
 * generated by Xtext 2.10.0
 */
package robotcontrol.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import robotcontrol.ide.contentassist.antlr.internal.InternalRocParser;
import robotcontrol.services.RocGrammarAccess;

public class RocParser extends AbstractContentAssistParser {

	@Inject
	private RocGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRocParser createParser() {
		InternalRocParser result = new InternalRocParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMotionAccess().getAlternatives(), "rule__Motion__Alternatives");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getSingleActionAccess().getAlternatives(), "rule__SingleAction__Alternatives");
					put(grammarAccess.getDirectedActionAccess().getAlternatives(), "rule__DirectedAction__Alternatives");
					put(grammarAccess.getLeftRightDirectionAccess().getAlternatives(), "rule__LeftRightDirection__Alternatives");
					put(grammarAccess.getFullDirectedActionAccess().getAlternatives(), "rule__FullDirectedAction__Alternatives");
					put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
					put(grammarAccess.getSpeedAccess().getAlternatives(), "rule__Speed__Alternatives");
					put(grammarAccess.getIntensityAccess().getAlternatives(), "rule__Intensity__Alternatives");
					put(grammarAccess.getDurationUnitAccess().getAlternatives(), "rule__DurationUnit__Alternatives");
					put(grammarAccess.getMovementAccess().getGroup(), "rule__Movement__Group__0");
					put(grammarAccess.getMovementAccess().getGroup_1(), "rule__Movement__Group_1__0");
					put(grammarAccess.getMotionAccess().getGroup_0(), "rule__Motion__Group_0__0");
					put(grammarAccess.getMotionAccess().getGroup_1(), "rule__Motion__Group_1__0");
					put(grammarAccess.getActionAccess().getGroup_1(), "rule__Action__Group_1__0");
					put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
					put(grammarAccess.getDirectedActionAccess().getGroup_0(), "rule__DirectedAction__Group_0__0");
					put(grammarAccess.getDirectedActionAccess().getGroup_1(), "rule__DirectedAction__Group_1__0");
					put(grammarAccess.getProgramAccess().getMovementsAssignment(), "rule__Program__MovementsAssignment");
					put(grammarAccess.getMovementAccess().getMotionsAssignment_0(), "rule__Movement__MotionsAssignment_0");
					put(grammarAccess.getMovementAccess().getMotionsAssignment_1_1(), "rule__Movement__MotionsAssignment_1_1");
					put(grammarAccess.getMotionAccess().getActionAssignment_0_0(), "rule__Motion__ActionAssignment_0_0");
					put(grammarAccess.getMotionAccess().getDurationAssignment_0_2(), "rule__Motion__DurationAssignment_0_2");
					put(grammarAccess.getMotionAccess().getDurationUnitAssignment_0_3(), "rule__Motion__DurationUnitAssignment_0_3");
					put(grammarAccess.getMotionAccess().getActionAssignment_1_0(), "rule__Motion__ActionAssignment_1_0");
					put(grammarAccess.getMotionAccess().getSpeedAssignment_1_2(), "rule__Motion__SpeedAssignment_1_2");
					put(grammarAccess.getMotionAccess().getActionAssignment_2(), "rule__Motion__ActionAssignment_2");
					put(grammarAccess.getActionAccess().getActionHolderAssignment_0(), "rule__Action__ActionHolderAssignment_0");
					put(grammarAccess.getActionAccess().getIntensityAssignment_1_0(), "rule__Action__IntensityAssignment_1_0");
					put(grammarAccess.getActionAccess().getActionHolderAssignment_1_1(), "rule__Action__ActionHolderAssignment_1_1");
					put(grammarAccess.getActionAccess().getIntensityAssignment_2_0(), "rule__Action__IntensityAssignment_2_0");
					put(grammarAccess.getActionAccess().getActionHolderAssignment_2_1(), "rule__Action__ActionHolderAssignment_2_1");
					put(grammarAccess.getCompleteActionAccess().getActionNameAssignment(), "rule__CompleteAction__ActionNameAssignment");
					put(grammarAccess.getSingleActionAccess().getActionNameAssignment_0(), "rule__SingleAction__ActionNameAssignment_0");
					put(grammarAccess.getSingleActionAccess().getActionNameAssignment_1(), "rule__SingleAction__ActionNameAssignment_1");
					put(grammarAccess.getDirectedActionAccess().getActionNameAssignment_0_0(), "rule__DirectedAction__ActionNameAssignment_0_0");
					put(grammarAccess.getDirectedActionAccess().getDirectionAssignment_0_1(), "rule__DirectedAction__DirectionAssignment_0_1");
					put(grammarAccess.getDirectedActionAccess().getActionNameAssignment_1_0(), "rule__DirectedAction__ActionNameAssignment_1_0");
					put(grammarAccess.getDirectedActionAccess().getDirectionAssignment_1_1(), "rule__DirectedAction__DirectionAssignment_1_1");
					put(grammarAccess.getLeftRightDirectedActionAccess().getTiltHeadAssignment(), "rule__LeftRightDirectedAction__TiltHeadAssignment");
					put(grammarAccess.getLeftRightDirectionAccess().getLeftAssignment_0(), "rule__LeftRightDirection__LeftAssignment_0");
					put(grammarAccess.getLeftRightDirectionAccess().getRightAssignment_1(), "rule__LeftRightDirection__RightAssignment_1");
					put(grammarAccess.getFullDirectedActionAccess().getTurnHeadAssignment_0(), "rule__FullDirectedAction__TurnHeadAssignment_0");
					put(grammarAccess.getFullDirectedActionAccess().getTurnEyesAssignment_1(), "rule__FullDirectedAction__TurnEyesAssignment_1");
					put(grammarAccess.getDirectionAccess().getUPAssignment_0(), "rule__Direction__UPAssignment_0");
					put(grammarAccess.getDirectionAccess().getDOWNAssignment_1(), "rule__Direction__DOWNAssignment_1");
					put(grammarAccess.getDirectionAccess().getLEFTAssignment_2(), "rule__Direction__LEFTAssignment_2");
					put(grammarAccess.getDirectionAccess().getRIGHTAssignment_3(), "rule__Direction__RIGHTAssignment_3");
					put(grammarAccess.getSpeedAccess().getSLOWESTAssignment_0(), "rule__Speed__SLOWESTAssignment_0");
					put(grammarAccess.getSpeedAccess().getSLOWAssignment_1(), "rule__Speed__SLOWAssignment_1");
					put(grammarAccess.getSpeedAccess().getNORMALAssignment_2(), "rule__Speed__NORMALAssignment_2");
					put(grammarAccess.getSpeedAccess().getFASTAssignment_3(), "rule__Speed__FASTAssignment_3");
					put(grammarAccess.getSpeedAccess().getFULLAssignment_4(), "rule__Speed__FULLAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRocParser typedParser = (InternalRocParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RocGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RocGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
