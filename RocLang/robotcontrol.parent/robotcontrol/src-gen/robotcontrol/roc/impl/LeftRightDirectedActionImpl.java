/**
 * generated by Xtext 2.10.0
 */
package robotcontrol.roc.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import robotcontrol.roc.LeftRightDirectedAction;
import robotcontrol.roc.RocPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Left Right Directed Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link robotcontrol.roc.impl.LeftRightDirectedActionImpl#getTiltHead <em>Tilt Head</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LeftRightDirectedActionImpl extends MinimalEObjectImpl.Container implements LeftRightDirectedAction
{
  /**
   * The default value of the '{@link #getTiltHead() <em>Tilt Head</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTiltHead()
   * @generated
   * @ordered
   */
  protected static final String TILT_HEAD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTiltHead() <em>Tilt Head</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTiltHead()
   * @generated
   * @ordered
   */
  protected String tiltHead = TILT_HEAD_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LeftRightDirectedActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RocPackage.Literals.LEFT_RIGHT_DIRECTED_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTiltHead()
  {
    return tiltHead;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTiltHead(String newTiltHead)
  {
    String oldTiltHead = tiltHead;
    tiltHead = newTiltHead;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RocPackage.LEFT_RIGHT_DIRECTED_ACTION__TILT_HEAD, oldTiltHead, tiltHead));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RocPackage.LEFT_RIGHT_DIRECTED_ACTION__TILT_HEAD:
        return getTiltHead();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RocPackage.LEFT_RIGHT_DIRECTED_ACTION__TILT_HEAD:
        setTiltHead((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RocPackage.LEFT_RIGHT_DIRECTED_ACTION__TILT_HEAD:
        setTiltHead(TILT_HEAD_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RocPackage.LEFT_RIGHT_DIRECTED_ACTION__TILT_HEAD:
        return TILT_HEAD_EDEFAULT == null ? tiltHead != null : !TILT_HEAD_EDEFAULT.equals(tiltHead);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (tiltHead: ");
    result.append(tiltHead);
    result.append(')');
    return result.toString();
  }

} //LeftRightDirectedActionImpl
