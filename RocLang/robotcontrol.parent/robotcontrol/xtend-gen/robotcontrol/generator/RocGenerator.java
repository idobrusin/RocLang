/**
 * generated by Xtext 2.10.0
 */
package robotcontrol.generator;

import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import robotcontrol.conversion.MovementConverter;
import robotcontrol.roc.Movement;
import robotcontrol.roc.Program;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RocGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      URI _uRI = resource.getURI();
      String _lastSegment = _uRI.lastSegment();
      String _replace = _lastSegment.replace(".roc", ".json");
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterator<Program> _filter = Iterators.<Program>filter(_allContents, Program.class);
      Iterable<Program> test = IteratorExtensions.<Program>toIterable(_filter);
      _builder.newLineIfNotEmpty();
      int _size = IterableExtensions.size(test);
      String _string = Integer.valueOf(_size).toString();
      _builder.append(_string, "");
      _builder.newLineIfNotEmpty();
      {
        TreeIterator<EObject> _allContents_1 = resource.getAllContents();
        Iterator<Program> _filter_1 = Iterators.<Program>filter(_allContents_1, Program.class);
        Iterable<Program> _iterable = IteratorExtensions.<Program>toIterable(_filter_1);
        for(final Program program : _iterable) {
          EList<Movement> _movements = program.getMovements();
          String _convertMovements = MovementConverter.convertMovements(_movements);
          _builder.append(_convertMovements, "");
          _builder.newLineIfNotEmpty();
        }
      }
      fsa.generateFile(_replace, _builder);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
