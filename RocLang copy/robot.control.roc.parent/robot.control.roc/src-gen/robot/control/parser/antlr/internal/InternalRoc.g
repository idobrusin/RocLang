/*
 * generated by Xtext 2.10.0
 */
grammar InternalRoc;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package robot.control.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package robot.control.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import robot.control.services.RocGrammarAccess;

}

@parser::members {

 	private RocGrammarAccess grammarAccess;

    public InternalRocParser(TokenStream input, RocGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected RocGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getMovementsMovementParserRuleCall_0());
			}
			lv_movements_0_0=ruleMovement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"movements",
					lv_movements_0_0,
					"robot.control.Roc.Movement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleMovement
entryRuleMovement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getMovementRule()); }
	iv_ruleMovement=ruleMovement
	{ $current=$iv_ruleMovement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Movement
ruleMovement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMovementAccess().getMotionsMotionParserRuleCall_0_0());
				}
				lv_motions_0_0=ruleMotion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMovementRule());
					}
					add(
						$current,
						"motions",
						lv_motions_0_0,
						"robot.control.Roc.Motion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_AND_1=RULE_AND
			{
				newLeafNode(this_AND_1, grammarAccess.getMovementAccess().getANDTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMovementAccess().getMotionsMotionParserRuleCall_1_1_0());
					}
					lv_motions_2_0=ruleMotion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMovementRule());
						}
						add(
							$current,
							"motions",
							lv_motions_2_0,
							"robot.control.Roc.Motion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		this_PERIOD_3=RULE_PERIOD
		{
			newLeafNode(this_PERIOD_3, grammarAccess.getMovementAccess().getPERIODTerminalRuleCall_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleMotion
entryRuleMotion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMotionRule()); }
	iv_ruleMotion=ruleMotion
	{ $current=$iv_ruleMotion.current; }
	EOF;

// Rule Motion
ruleMotion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMotionAccess().getActionActionParserRuleCall_0_0());
				}
				lv_action_0_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMotionRule());
					}
					set(
						$current,
						"action",
						lv_action_0_0,
						"robot.control.Roc.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_FOR_1=RULE_FOR
		{
			newLeafNode(this_FOR_1, grammarAccess.getMotionAccess().getFORTerminalRuleCall_1());
		}
		(
			(
				lv_duration_2_0=RULE_DURATION
				{
					newLeafNode(lv_duration_2_0, grammarAccess.getMotionAccess().getDurationDurationTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMotionRule());
					}
					setWithLastConsumed(
						$current,
						"duration",
						lv_duration_2_0,
						"robot.control.Roc.Duration");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMotionAccess().getDurationUnitDurationUnitEnumRuleCall_3_0());
				}
				lv_durationUnit_3_0=ruleDurationUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMotionRule());
					}
					set(
						$current,
						"durationUnit",
						lv_durationUnit_3_0,
						"robot.control.Roc.DurationUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getActionHolderCompleteActionParserRuleCall_0_0());
				}
				lv_actionHolder_0_0=ruleCompleteAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"actionHolder",
						lv_actionHolder_0_0,
						"robot.control.Roc.CompleteAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getIntensityIntensityEnumRuleCall_1_0_0());
					}
					lv_intensity_1_0=ruleIntensity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"intensity",
							lv_intensity_1_0,
							"robot.control.Roc.Intensity");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getActionHolderSingleActionParserRuleCall_1_1_0());
					}
					lv_actionHolder_2_0=ruleSingleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"actionHolder",
							lv_actionHolder_2_0,
							"robot.control.Roc.SingleAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getIntensityIntensityEnumRuleCall_2_0_0());
					}
					lv_intensity_3_0=ruleIntensity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"intensity",
							lv_intensity_3_0,
							"robot.control.Roc.Intensity");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getActionHolderDirectedActionParserRuleCall_2_1_0());
					}
					lv_actionHolder_4_0=ruleDirectedAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"actionHolder",
							lv_actionHolder_4_0,
							"robot.control.Roc.DirectedAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCompleteAction
entryRuleCompleteAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompleteActionRule()); }
	iv_ruleCompleteAction=ruleCompleteAction
	{ $current=$iv_ruleCompleteAction.current; }
	EOF;

// Rule CompleteAction
ruleCompleteAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_actionName_0_0='neutral'
				{
					newLeafNode(lv_actionName_0_0, grammarAccess.getCompleteActionAccess().getActionNameNeutralKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompleteActionRule());
					}
					setWithLastConsumed($current, "actionName", lv_actionName_0_0, "neutral");
				}
			)
		)
		otherlv_1='face'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompleteActionAccess().getFaceKeyword_1());
		}
	)
;

// Entry rule entryRuleSingleAction
entryRuleSingleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleActionRule()); }
	iv_ruleSingleAction=ruleSingleAction
	{ $current=$iv_ruleSingleAction.current; }
	EOF;

// Rule SingleAction
ruleSingleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_actionName_0_0='drop jaw'
				{
					newLeafNode(lv_actionName_0_0, grammarAccess.getSingleActionAccess().getActionNameDropJawKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleActionRule());
					}
					setWithLastConsumed($current, "actionName", lv_actionName_0_0, "drop jaw");
				}
			)
		)
		    |
		(
			(
				lv_actionName_1_0='nod Head'
				{
					newLeafNode(lv_actionName_1_0, grammarAccess.getSingleActionAccess().getActionNameNodHeadKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleActionRule());
					}
					setWithLastConsumed($current, "actionName", lv_actionName_1_0, "nod Head");
				}
			)
		)
	)
;

// Entry rule entryRuleDirectedAction
entryRuleDirectedAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectedActionRule()); }
	iv_ruleDirectedAction=ruleDirectedAction
	{ $current=$iv_ruleDirectedAction.current; }
	EOF;

// Rule DirectedAction
ruleDirectedAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectedActionAccess().getActionNameLeftRightDirectedActionParserRuleCall_0_0_0());
					}
					lv_actionName_0_0=ruleLeftRightDirectedAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectedActionRule());
						}
						set(
							$current,
							"actionName",
							lv_actionName_0_0,
							"robot.control.Roc.LeftRightDirectedAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectedActionAccess().getDirectionLeftRightDirectionParserRuleCall_0_1_0());
					}
					lv_direction_1_0=ruleLeftRightDirection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectedActionRule());
						}
						set(
							$current,
							"direction",
							lv_direction_1_0,
							"robot.control.Roc.LeftRightDirection");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectedActionAccess().getActionNameBackForthDirectedActionParserRuleCall_1_0_0());
					}
					lv_actionName_2_0=ruleBackForthDirectedAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectedActionRule());
						}
						set(
							$current,
							"actionName",
							lv_actionName_2_0,
							"robot.control.Roc.BackForthDirectedAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectedActionAccess().getDirectionBackForthDirectionParserRuleCall_1_1_0());
					}
					lv_direction_3_0=ruleBackForthDirection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectedActionRule());
						}
						set(
							$current,
							"direction",
							lv_direction_3_0,
							"robot.control.Roc.BackForthDirection");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectedActionAccess().getActionNameFullDirectedActionParserRuleCall_2_0_0());
					}
					lv_actionName_4_0=ruleFullDirectedAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectedActionRule());
						}
						set(
							$current,
							"actionName",
							lv_actionName_4_0,
							"robot.control.Roc.FullDirectedAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectedActionAccess().getDirectionDirectionParserRuleCall_2_1_0());
					}
					lv_direction_5_0=ruleDirection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectedActionRule());
						}
						set(
							$current,
							"direction",
							lv_direction_5_0,
							"robot.control.Roc.Direction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLeftRightDirectedAction
entryRuleLeftRightDirectedAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRightDirectedActionRule()); }
	iv_ruleLeftRightDirectedAction=ruleLeftRightDirectedAction
	{ $current=$iv_ruleLeftRightDirectedAction.current; }
	EOF;

// Rule LeftRightDirectedAction
ruleLeftRightDirectedAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_tiltHead_0_0='tilt'
				{
					newLeafNode(lv_tiltHead_0_0, grammarAccess.getLeftRightDirectedActionAccess().getTiltHeadTiltKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeftRightDirectedActionRule());
					}
					setWithLastConsumed($current, "tiltHead", lv_tiltHead_0_0, "tilt");
				}
			)
		)
		otherlv_1='head'
		{
			newLeafNode(otherlv_1, grammarAccess.getLeftRightDirectedActionAccess().getHeadKeyword_1());
		}
	)
;

// Entry rule entryRuleLeftRightDirection
entryRuleLeftRightDirection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRightDirectionRule()); }
	iv_ruleLeftRightDirection=ruleLeftRightDirection
	{ $current=$iv_ruleLeftRightDirection.current; }
	EOF;

// Rule LeftRightDirection
ruleLeftRightDirection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_left_0_0='left'
				{
					newLeafNode(lv_left_0_0, grammarAccess.getLeftRightDirectionAccess().getLeftLeftKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeftRightDirectionRule());
					}
					setWithLastConsumed($current, "left", lv_left_0_0, "left");
				}
			)
		)
		    |
		(
			(
				lv_right_1_0='right'
				{
					newLeafNode(lv_right_1_0, grammarAccess.getLeftRightDirectionAccess().getRightRightKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeftRightDirectionRule());
					}
					setWithLastConsumed($current, "right", lv_right_1_0, "right");
				}
			)
		)
	)
;

// Entry rule entryRuleBackForthDirectedAction
entryRuleBackForthDirectedAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBackForthDirectedActionRule()); }
	iv_ruleBackForthDirectedAction=ruleBackForthDirectedAction
	{ $current=$iv_ruleBackForthDirectedAction.current; }
	EOF;

// Rule BackForthDirectedAction
ruleBackForthDirectedAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_head_0_0='head'
			{
				newLeafNode(lv_head_0_0, grammarAccess.getBackForthDirectedActionAccess().getHeadHeadKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBackForthDirectedActionRule());
				}
				setWithLastConsumed($current, "head", lv_head_0_0, "head");
			}
		)
	)
;

// Entry rule entryRuleBackForthDirection
entryRuleBackForthDirection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBackForthDirectionRule()); }
	iv_ruleBackForthDirection=ruleBackForthDirection
	{ $current=$iv_ruleBackForthDirection.current; }
	EOF;

// Rule BackForthDirection
ruleBackForthDirection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_back_0_0='back'
				{
					newLeafNode(lv_back_0_0, grammarAccess.getBackForthDirectionAccess().getBackBackKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBackForthDirectionRule());
					}
					setWithLastConsumed($current, "back", lv_back_0_0, "back");
				}
			)
		)
		    |
		(
			(
				lv_forth_1_0='forth'
				{
					newLeafNode(lv_forth_1_0, grammarAccess.getBackForthDirectionAccess().getForthForthKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBackForthDirectionRule());
					}
					setWithLastConsumed($current, "forth", lv_forth_1_0, "forth");
				}
			)
		)
	)
;

// Entry rule entryRuleFullDirectedAction
entryRuleFullDirectedAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFullDirectedActionRule()); }
	iv_ruleFullDirectedAction=ruleFullDirectedAction
	{ $current=$iv_ruleFullDirectedAction.current; }
	EOF;

// Rule FullDirectedAction
ruleFullDirectedAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_turnHead_0_0='turn'
					{
						newLeafNode(lv_turnHead_0_0, grammarAccess.getFullDirectedActionAccess().getTurnHeadTurnKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFullDirectedActionRule());
						}
						setWithLastConsumed($current, "turnHead", lv_turnHead_0_0, "turn");
					}
				)
			)
			otherlv_1='head'
			{
				newLeafNode(otherlv_1, grammarAccess.getFullDirectedActionAccess().getHeadKeyword_0_1());
			}
		)
		    |
		(
			(
				(
					lv_turnEyes_2_0='turn'
					{
						newLeafNode(lv_turnEyes_2_0, grammarAccess.getFullDirectedActionAccess().getTurnEyesTurnKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFullDirectedActionRule());
						}
						setWithLastConsumed($current, "turnEyes", lv_turnEyes_2_0, "turn");
					}
				)
			)
			otherlv_3='eyes'
			{
				newLeafNode(otherlv_3, grammarAccess.getFullDirectedActionAccess().getEyesKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleDirection
entryRuleDirection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectionRule()); }
	iv_ruleDirection=ruleDirection
	{ $current=$iv_ruleDirection.current; }
	EOF;

// Rule Direction
ruleDirection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_UP_0_0='up'
				{
					newLeafNode(lv_UP_0_0, grammarAccess.getDirectionAccess().getUPUpKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectionRule());
					}
					setWithLastConsumed($current, "UP", lv_UP_0_0, "up");
				}
			)
		)
		    |
		(
			(
				lv_DOWN_1_0='down'
				{
					newLeafNode(lv_DOWN_1_0, grammarAccess.getDirectionAccess().getDOWNDownKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectionRule());
					}
					setWithLastConsumed($current, "DOWN", lv_DOWN_1_0, "down");
				}
			)
		)
		    |
		(
			(
				lv_LEFT_2_0='left'
				{
					newLeafNode(lv_LEFT_2_0, grammarAccess.getDirectionAccess().getLEFTLeftKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectionRule());
					}
					setWithLastConsumed($current, "LEFT", lv_LEFT_2_0, "left");
				}
			)
		)
		    |
		(
			(
				lv_RIGHT_3_0='right'
				{
					newLeafNode(lv_RIGHT_3_0, grammarAccess.getDirectionAccess().getRIGHTRightKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectionRule());
					}
					setWithLastConsumed($current, "RIGHT", lv_RIGHT_3_0, "right");
				}
			)
		)
	)
;

// Rule Intensity
ruleIntensity returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='pronounced'
			{
				$current = grammarAccess.getIntensityAccess().getCEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getIntensityAccess().getCEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='trace of'
			{
				$current = grammarAccess.getIntensityAccess().getAEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getIntensityAccess().getAEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='slightly'
			{
				$current = grammarAccess.getIntensityAccess().getBEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getIntensityAccess().getBEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='severe'
			{
				$current = grammarAccess.getIntensityAccess().getDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getIntensityAccess().getDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='maximum'
			{
				$current = grammarAccess.getIntensityAccess().getEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getIntensityAccess().getEEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule DurationUnit
ruleDurationUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='milliseconds'
			{
				$current = grammarAccess.getDurationUnitAccess().getMILLISECONDSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDurationUnitAccess().getMILLISECONDSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='seconds'
			{
				$current = grammarAccess.getDurationUnitAccess().getSECONDSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDurationUnitAccess().getSECONDSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='minutes'
			{
				$current = grammarAccess.getDurationUnitAccess().getMINUTESEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDurationUnitAccess().getMINUTESEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_DURATION : RULE_INT;

RULE_FOR : 'for';

RULE_AND : 'and';

RULE_PERIOD : '.';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
